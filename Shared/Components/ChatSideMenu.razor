@inject IUserSession session;
@inject IChatHistoryRepository ChatHistory;
@inject IMessageService messageService;
@inject IJSRuntime JSRuntime;
@implements IDisposable;

<div class="d-flex flex-column vh-100">
    <div class="row justify-content-center">
        <img src="images/cloud.svg" class="w-50" />
    </div>
    <hr>

    @if (chatHistory == null || chatHistory.Count() == 0)
    {
        <div class="row text-center text-danger mt-5">
            <h2 class="fs-4">No knowledge collected yet...</h2>
        </div>
    }
    else
    {
        @foreach (var chat in chatHistory)
        {
            <div class="row">
                <div class="col" @onclick="() => GoToChat(chat)">
                    <article class="card mb-3 m-auto">
                        <a role="button"
                           class="text-decoration-none text-black">
                            <div class="row g-0">
                                <div class="col-3 d-flex align-self-center">
                                    <img src="@(chat.CardImage)"
                                         class="img-fluid"
                                         alt="Space template logo" />
                                </div>
                                <div class="col-9">
                                    <div class="card-body">
                                        <h2 class="card-title fs-3 text-danger">
                                            @chat.CardHeading
                                        </h2>
                                        <p class="card-text">
                                            @chat.Heading
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </a>
                    </article>
                </div>
            </div>
        }
    }
</div>

@code {
    private IEnumerable<ChatHistory> chatHistory;

    protected override async Task OnInitializedAsync()
    {
        await LoadHistory();

        messageService.OnNewChat += OnChatUpdate;
        messageService.OnDeleteChat += OnChatUpdate;
    }

    void OnChatUpdate()
    {
        LoadHistory();
    }

    async Task LoadHistory()
    {
        try
        {
            chatHistory = await ChatHistory.GetAllAsync(x => x.UserId == session.User.Id) ?? new List<ChatHistory>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error report: {ex}");
        }

        if (chatHistory.Any(chat => chat.Id == session.CurrentChat.Id) && session.CurrentChat.Prompts.Count() <= 2)
            StateHasChanged();
    }

    void GoToChat(ChatHistory selectedChat)
    {
        JSRuntime.InvokeAsync<object>("Interop.StopPlay");
        session.CurrentChat = selectedChat;
        messageService.UpdateChat();
    }

    public void Dispose()
    {
        messageService.OnNewChat -= OnChatUpdate;
        messageService.OnDeleteChat -= OnChatUpdate;
    }
}