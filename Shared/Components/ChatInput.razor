@using System.Text.Json;
@inject IAzureAiChatServices ChatService;
@inject IJSRuntime JSRuntime;
@inject IUserSession session;
@inject ICookieStoreAPIService cookieStore;
@inject IChatHistoryRepository ChatHistory;
@inject IMessageService messageService;
@inject IConfiguration Configuration;
@inject NavigationManager navManager;

<div class="card-footer p-1 border-0 "
     style="background-color: #f0f0f0">
    <div class="input-group py-2 px-2">
        <textarea @bind="inputText"
        @oninput="Resize"
                  class="form-control rounded"
                  id="promptInput"
                  rows="1"
                  disabled="@isDisabled"
                  aria-label="Text input for bot prompt"
                  placeholder="Börja skriva..." />
        @if (!isText)
        {
            <div class="align-self-center">
                <button type="button" @onclick="StartRecording" class="btn btn-outline-secondary rounded-circle ms-2 px-2 bg-white border-0" disabled="@isDisabled">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-mic-fill text-warning" viewBox="0 0 16 16">
                        <path d="M5 3a3 3 0 0 1 6 0v5a3 3 0 0 1-6 0V3z" />
                        <path d="M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5z" />
                    </svg>
                </button>
            </div>
        }
        else
        {
            <div class="align-self-center">
            <button type="button" @onclick="HandleTextInput" class="btn btn-outline-secondary rounded-circle ms-2 px-2 bg-white border-0" disabled="@isDisabled">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-send-fill text-danger " viewBox="0 0 16 16">
                    <path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855H.766l-.452.18a.5.5 0 0 0-.082.887l.41.26.001.002 4.995 3.178 3.178 4.995.002.002.26.41a.5.5 0 0 0 .886-.083l6-15Zm-1.833 1.89L6.637 10.07l-.215-.338a.5.5 0 0 0-.154-.154l-.338-.215 7.494-7.494 1.178-.471-.47 1.178Z" />
                </svg>
            </button>
            </div>
        }
    </div>
</div>

<ModalDialog @ref="@ModalDialog" Title="">
    <div class="row">
        <svg xmlns="http://www.w3.org/2000/svg" width="16rem" height="16rem" fill="currentColor" class="bi bi-mic-fill my-5 text-white" viewBox="0 0 16 16">
            <path d="M5 3a3 3 0 0 1 6 0v5a3 3 0 0 1-6 0V3z" />
            <path d="M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5z" />
        </svg>
        <h3 class="text-info text-center my-5">Recording...</h3>
    </div>
</ModalDialog>

@code {
    private ModalDialog ModalDialog { get; set; }
    private IJSObjectReference textToSpeechInterop { get; set; }

    private List<Message> chatMessages = new List<Message>();
    private ChatHistory currentChat;
    private bool isText, isDisabled;
    private string? inputText = string.Empty;

    private void btnState(string e) 
        => isText = (String.IsNullOrEmpty(e)) ? false : true;

    protected override async Task OnInitializedAsync()
    {
        messageService.OnChatUpdate += async () => { LoadMessages(); };

        await LoadMessages();
    }

    async Task LoadMessages()
    {
        chatMessages = session.CurrentChat.Prompts;
        currentChat = session.CurrentChat;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                textToSpeechInterop = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/AzureCognitiveServicesHelper.js");
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error loading JavaScript module: " + ex.Message);
            }
        }
    }

    private async Task StartRecording()
    {
        isDisabled = true;
        ModalDialog.Open();

        if (textToSpeechInterop != null)
        {
            try
            {
                await JSRuntime.InvokeAsync<object>("Interop.StopPlay");

                var result = await JSRuntime.InvokeAsync<string>("Interop.SpeechToTextSDK", session.Key, session.Reigion);

                ModalDialog.Close();

                if (result == null){
                    SaveChat(new Message("You need to say something!", true));
                    ModalDialog.Close();
                    isDisabled = false;
                    return;
                }

                await HandleAudioData(JsonSerializer.Serialize(result));
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error creating Speech SDK object from blazor: " + ex.Message);
                isDisabled = false;
            }
        }
        else
        {
            Console.WriteLine("speechInterop reference is not loaded.");
        }
    }

    private async Task HandleAudioData(string response)
    {
        await SaveChat(new Message(response, true));

        await GetAIResponse();
    }

    public async Task HandleTextInput()
    {
        if (string.IsNullOrEmpty(inputText.Trim())) return;

        await SaveChat(new Message(inputText, true));

        await GetAIResponse();

        inputText = string.Empty;
    }

    private async Task GetAIResponse()
    {
        var response = await ChatService.GetResponseAsync(chatMessages, currentChat.SystemMessage);

        if (response == null)
            response = new Message("Please state your question again!", false);

        await SaveChat(response);

        await GetAiVoice(response);
    }

    private async Task GetAiVoice(Message request)
    {
        isText = false;

        if (textToSpeechInterop != null)
        {
            try
            {
                await JSRuntime.InvokeAsync<object>("Interop.StopPlay");
                var aiSpeechResponse = await JSRuntime.InvokeAsync<object>("Interop.TextToSpeechSDK", request.Body, "sv-SE-SofieNeural", session.Key, session.Reigion);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error creating Text to Speech SDK object: " + ex.Message);
            }
        }
        else
        {
            Console.WriteLine("Speech Module is not loaded.");
        }

        isDisabled = false;
    }

    async Task SaveChat(Message messageData)
    {
        isDisabled = true;

        chatMessages.Add(messageData);

        var storedHistory = await ChatHistory.GetAllAsync() ?? new List<ChatHistory>();

        var currentHistory = storedHistory.FirstOrDefault(x => x.Id == currentChat.Id);

        if (currentHistory == null)
        {
            var newHistory = new ChatHistory
            {
                Id = currentChat.Id,
                UserId = session.User.Id,
                Heading = session.ReFraser(chatMessages.FirstOrDefault(x => x.IsPrompt == true).Body, 5),
                Prompts = chatMessages,
                IsLocked = false,
                CardHeading = session.PromptCard.CardHeading,
                CardImage = session.PromptCard.CardImage,
                SystemMessage = session.PromptCard.SystemText
            };

            storedHistory.Add(newHistory);
        }
        else
        {
            currentHistory.Prompts = chatMessages;
        }

        await ChatHistory.CreateAsync(storedHistory);

        messageService.SendMessage(chatMessages);
    }

    private async Task Resize(ChangeEventArgs e)
    {
        btnState(e.Value.ToString());

        var result = await JSRuntime.InvokeAsync<object>("blazorExtensions.AdjustInputField");

        Double.TryParse(result.ToString(), out var MyHeight);
    }
}