@using System.Text.Json;
@inject IAzureAiChatServices ChatService;
@inject IJSRuntime JSRuntime;
@inject IUserSession Session;
@inject ICookieAPIService CookieStore;
@inject IChatHistoryRepository ChatHistory;
@inject IMessageService MessageService;
@inject IConfiguration Configuration;
@inject HttpClient Http;
@inject NavigationManager NavManager;
@implements IDisposable;

<div class="card-footer p-1 border-0 "
     style="background-color: #f0f0f0">
    <div class="input-group py-2 px-2">
        <textarea @bind="inputText"
        @oninput="Resize"
                  class="form-control rounded"
                  id="promptInput"
                  rows="1"
                  disabled="@isDisabled"
                  aria-label="Text input for bot prompt"
                  placeholder="Start Typing..." />
        @if (!isText)
        {
            <div class="align-self-center">
                <button type="button" @onclick="StartRecording" class="btn btn-outline-secondary rounded-circle ms-2 px-2 bg-white border-0" disabled="@isDisabled">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-mic-fill text-warning" viewBox="0 0 16 16">
                        <path d="M5 3a3 3 0 0 1 6 0v5a3 3 0 0 1-6 0V3z" />
                        <path d="M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5z" />
                    </svg>
                </button>
            </div>
        }
        else
        {
            <div class="align-self-center">
            <button type="button" @onclick="HandleTextInput" class="btn btn-outline-secondary rounded-circle ms-2 px-2 bg-white border-0" disabled="@isDisabled">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-send-fill text-danger " viewBox="0 0 16 16">
                    <path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855H.766l-.452.18a.5.5 0 0 0-.082.887l.41.26.001.002 4.995 3.178 3.178 4.995.002.002.26.41a.5.5 0 0 0 .886-.083l6-15Zm-1.833 1.89L6.637 10.07l-.215-.338a.5.5 0 0 0-.154-.154l-.338-.215 7.494-7.494 1.178-.471-.47 1.178Z" />
                </svg>
            </button>
            </div>
        }
    </div>
</div>

<ModalDialog @ref="@ModalDialog" Title="">
    @if (awaitReply)
    {
        <div class="row text-white">
            <svg xmlns="http://www.w3.org/2000/svg" width="16rem" height="16rem" fill="currentColor" class="bi bi-hourglass-split my-5 text-white" viewBox="0 0 16 16">
                <path d="M2.5 15a.5.5 0 1 1 0-1h1v-1a4.5 4.5 0 0 1 2.557-4.06c.29-.139.443-.377.443-.59v-.7c0-.213-.154-.451-.443-.59A4.5 4.5 0 0 1 3.5 3V2h-1a.5.5 0 0 1 0-1h11a.5.5 0 0 1 0 1h-1v1a4.5 4.5 0 0 1-2.557 4.06c-.29.139-.443.377-.443.59v.7c0 .213.154.451.443.59A4.5 4.5 0 0 1 12.5 13v1h1a.5.5 0 0 1 0 1h-11zm2-13v1c0 .537.12 1.045.337 1.5h6.326c.216-.455.337-.963.337-1.5V2h-7zm3 6.35c0 .701-.478 1.236-1.011 1.492A3.5 3.5 0 0 0 4.5 13s.866-1.299 3-1.48V8.35zm1 0v3.17c2.134.181 3 1.48 3 1.48a3.5 3.5 0 0 0-1.989-3.158C8.978 9.586 8.5 9.052 8.5 8.351z" />
            </svg>
        <h3 class="text-info text-center my-5">Waiting for reply...</h3>
        </div>
    }
    else
    {
        <div class="row">
            <svg xmlns="http://www.w3.org/2000/svg" width="16rem" height="16rem" fill="currentColor" class="bi bi-mic-fill my-5 text-white" viewBox="0 0 16 16">
                <path d="M5 3a3 3 0 0 1 6 0v5a3 3 0 0 1-6 0V3z" />
                <path d="M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5z" />
            </svg>
            <h3 class="text-info text-center my-5">Recording...</h3>
        </div>
    }
</ModalDialog>

@code {
    private ModalDialog ModalDialog { get; set; }
    private IJSObjectReference textToSpeechInterop { get; set; }

    private List<Message> chatMessages = new List<Message>();
    private ChatHistory currentChat;
    private bool awaitReply;
    private bool isText, isDisabled;
    private string? inputText = string.Empty;

    private void btnState(string e) 
        => isText = (String.IsNullOrEmpty(e)) ? false : true;

    protected override async Task OnInitializedAsync()
    {
        MessageService.OnChatUpdate += LoadMessages;
        LoadMessages();
    }

    async void LoadMessages()
    {
        chatMessages = Session.CurrentChat.Prompts;
        currentChat = Session.CurrentChat;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                textToSpeechInterop = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/AzureCognitiveServicesHelper.js");
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error loading JavaScript module: " + ex.Message);
            }
        }
    }

    void ModalUpdater()
    {
        awaitReply = true;
        StateHasChanged();
    }

    private async Task StartRecording()
    {
        isDisabled = true;
        ModalDialog.Open();

        if (textToSpeechInterop != null)
        {
            try
            {
                await JSRuntime.InvokeAsync<object>("Interop.StopPlay");

                var result = await JSRuntime.InvokeAsync<string>("Interop.SpeechToTextSDK", Session.Key, Session.Reigion);

                ModalUpdater();

                if (result == null){
                    SaveChat(new Message("You need to say something!", true));
                    ModalDialog.Close();
                    isDisabled = false;
                    return;
                }

                await HandleAudioData(result);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error creating Speech SDK object from blazor: " + ex.Message);
                isDisabled = false;
            }
        }
        else
        {
            Console.WriteLine("speechInterop reference is not loaded.");
        }
    }

    private async Task HandleAudioData(string response)
    {
        if (await ExtensionMethods.StartsWithQuestionWord(Http, response))
            response = response.Substring(0, response.Length - 1) + "?";

        await SaveChat(new Message(response, true));

        await GetAIResponse();
    }

    public async Task HandleTextInput()
    {
        inputText = inputText.Trim();

        if (string.IsNullOrEmpty(inputText)) return;

        await SaveChat(new Message(inputText, true));

        await GetAIResponse();

        inputText = string.Empty;
    }

    private async Task GetAIResponse()
    {
        var response = await ChatService.GetResponseAsync(chatMessages, currentChat.SystemMessage);

        response ??= new Message("Please state your question again!", false);

        await SaveChat(response);

        await GetAiVoice(response);

        var storedHistory = await ChatHistory.GetAllAsync() ?? new List<ChatHistory>();

        if (storedHistory.Count() > 5) await ChatHistory.RemoveItemWhenMoreThanFive(storedHistory.ToList());

    }

    private async Task GetAiVoice(Message request)
    {
        isText = awaitReply = false;

        ModalDialog.Close();

        if (textToSpeechInterop != null)
        {
            try
            {
                await JSRuntime.InvokeAsync<object>("Interop.StopPlay");
                var aiSpeechResponse = await JSRuntime.InvokeAsync<object>("Interop.TextToSpeechSDK", request.Body, "sv-SE-SofieNeural", Session.Key, Session.Reigion);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error creating Text to Speech SDK object: " + ex.Message);
            }
        }
        else
        {
            Console.WriteLine("Speech Module is not loaded.");
        }

        isDisabled = false;
    }

    async Task SaveChat(Message messageData)
    {
        isDisabled = true;

        chatMessages.Add(messageData);

        var storedHistory = await ChatHistory.GetAllAsync() ?? new List<ChatHistory>();

        var currentHistory = storedHistory.FirstOrDefault(x => x.Id == currentChat.Id);

        if (currentHistory == null)
        {
            var newHistory = new ChatHistory
            {
                Id = currentChat.Id,
                Heading = ExtensionMethods.StringByWordCount(chatMessages.FirstOrDefault(x => x.IsPrompt == true).Body, 5),
                UserId = Session.User.Id,
                Prompts = chatMessages,
                IsLocked = false,
                CardHeading = Session.PromptCard.CardHeading,
                CardImage = Session.PromptCard.CardImage,
                SystemMessage = Session.PromptCard.SystemText
            };

            storedHistory.Add(newHistory);
        }
        else
        {
            currentHistory.Prompts = chatMessages;
        }

        await ChatHistory.CreateAsync(storedHistory);

        MessageService.MessageUpdate(chatMessages);

        if(chatMessages.Count < 2)
            MessageService.NewChat();
    }

    private async Task Resize(ChangeEventArgs e)
    {
        btnState(e.Value.ToString());

        var result = await JSRuntime.InvokeAsync<object>("blazorExtensions.AdjustInputField");

        Double.TryParse(result.ToString(), out var MyHeight);
    }

    public void Dispose()
    {
        MessageService.OnChatUpdate -= LoadMessages;
    }
}