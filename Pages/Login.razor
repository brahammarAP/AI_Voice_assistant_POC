@page "/login"
@using System.ComponentModel.DataAnnotations;
@layout NoHeaderLayout;
@inject ILocalStorageAPI LocalStorage;
@inject IConfiguration Configuration;
@inject ICookieAPIService CookieStore;
@inject IUserSession Session;
@inject ICryptoService Crypto;

<PageTitle>Login</PageTitle>

<div class="container">
    <h1 class="my-5">User Account</h1>
    <div class="row mt-5">
        <div class="col col-lg-6">
            <EditForm Model="@User">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label class="form-label" for="username">Username:</label>
                    <InputText 
                        class="form-control" 
                        id="username" 
                        @bind-Value="User.Username" 
                        placeholder="name@example.com" 
                        autocomplete="username"
                        aria-describedby="Enter Username" />
                    <div id="Enter Username" class="form-text">
                        We'll <span class="text-decoration-line-through">never</span> share your email with anyone else.
                    </div>
                    <ValidationMessage For="@(() => User.Username)" />
                </div>
                <div class="mb-3">
                    <label class="form-label" for="password">Password:</label>
                    <InputText 
                        type="password" 
                        id="password" 
                        class="form-control" 
                        @bind-Value="User.Password" />
                    <ValidationMessage For="@(() => User.Password)" />
                </div>

                <h3 class="text-center text-danger mb-5">@message</h3>

                <button class="btn btn-warning me-2" type="submit" @onclick="UserLogin">Login</button>

                <button class="btn btn-primary" @onclick="UserRegister">Register new user</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private UserDetails User = new();

    private string message = string.Empty;

    private async Task UserLogin()
    {
        User getUser = new();

        var storedUsers = await LocalStorage.GetItemAsync<List<User>>(Configuration["UserSettings:UserStorageLocation"]) ?? null;

        if (storedUsers != null)
            getUser = storedUsers.FirstOrDefault(x => x.Username == User.Username);

        if (getUser != null && getUser.Username == User.Username && await Crypto.DecryptAsync(getUser.Password) == User.Password)
        {
            await SetCookie(getUser);
        }
        else
        {
            message = "User not found";
            User.Password = "";
        }
    }

    private async Task UserRegister()
    {
        if (string.IsNullOrEmpty(User.Username) || string.IsNullOrEmpty(User.Password)) 
        {
            return;
        }

        var storedUsers = await LocalStorage.GetItemAsync<List<User>>(Configuration["UserSettings:UserStorageLocation"]) ?? new List<User>();

        if (storedUsers.FirstOrDefault(x => x.Username == User.Username) != null)
        {
            message = "Username already exists";
            User.Password = "";
            return;
        }

        CryptoResult encrypted = await Crypto.EncryptAsync(User.Password);

        var newUser = new User()
        {
            Username = User.Username,
            Password = encrypted.Value
        };

        storedUsers.Add(newUser);

        await LocalStorage.SetItemAsync<List<User>>(Configuration["UserSettings:UserStorageLocation"], storedUsers);

        await SetCookie(newUser);
    }

    async Task SetCookie(User user)
    {
        List<Cookie> cookieList = new List<Cookie>();

        var expirationDate = DateTime.UtcNow.Add(TimeSpan.FromDays(10));
        double unixTimestampMilliseconds = expirationDate.Subtract(new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalMilliseconds;

        cookieList.Add(new Cookie() { Name = "Username", Value = user.Username, Expires = unixTimestampMilliseconds });
        cookieList.Add(new Cookie() { Name = "UserId", Value = user.Id.ToString(), Expires = unixTimestampMilliseconds });

        foreach (var cookie in cookieList)
        {
            await CookieStore.SetAsync(cookie);
        }

        SetUserSession(user);
    }

    void SetUserSession(User user)
    {
        Session.User.Username = user.Username;
        Session.User.Id = user.Id;

        navManager.NavigateTo("/menu");
    }

    private class UserDetails
    {
        [Required]
        [RegularExpression(@"^[a-zA-Z0-9!@#$%^&*()_+=,.?-]{2,50}$", ErrorMessage = "Invalid characters.")]
        public string Username { get; set; }
        [Required]
        [RegularExpression(@"^[a-zA-Z0-9!@#$%^&*()_+=,.?-]{2,50}$", ErrorMessage = "Invalid characters.")]
        public string Password { get; set; }
    }
}