@page "/menu"
@inject ICookieStoreAPIService CookieStore;
@inject IUserSession Session;
@inject MobileSwipeService Swipe;
@inject IChatHistoryRepository ChatHistory;
@inject IMessageService MessageService;

<PageTitle>Meny</PageTitle>

<div class="container"> 
    <article class="row mb-5">
        <div class="col card me-md-2 border-0" @onclick="() => StartWizard()">
            <a role="button">
                <div class="d-flex card-header bg-white border-0 justify-content-center">
                    <img src="images/building.svg"
                         class="img-fluid w-75 "
                         alt="School logo" />
                </div>
                <div class="card-body">
                    <h1 class="fs-6">
                        Begin a captivating journey with our app! Dive into endless knowledge explorations. Discover. Grow. Start today!
                    </h1>
                    <div class="m-0">
                        Start with our premade Wizards here!
                        <span class="fs-3 fw-bold">&rarr;</span>
                    </div>
                </div>
            </a>
        </div>
        <div class="col card d-none d-md-block ms-md-2 border-0">
            <a role="button">
                <div class="card-body d-flex justify-content-center">
                    <img src="images/cutecat.gif"
                         class="card-header bg-white border-0 img-fluid"
                         alt="Cute Cat gid" />
                </div>
            </a>
        </div>
    </article>

    <div class="row mb-3">
        <h2 class="border-start border-success border-5 rounded-1 fs-4 fw-semibold mb-3">
            Chat History
        </h2>
    </div>

    @if (userChatHistory == null || userChatHistory.Count() == 0)
    {
        <div class="row text-center text-danger mt-5">
            <h2 class="fs-2">You have no search history yet!</h2>
        </div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-2">
            @foreach (var chat in userChatHistory)
            {
                <div class="col-12 col-md-6" 
                @onclick="() => GoToChat(chat)"
                @ontouchstart="SwipeTouchStart"
                @ontouchend="@((TouchEventArgs t) => HandleTouchEnd(chat.Id, t))">
                    <article class="card mb-3 m-auto">
                        <div class="d-flex align-content-center justify-content-end">
                            <div class="d-flex align-items-center px-4 text-white bg-info rounded-start">
                                <svg xmlns="http://www.w3.org/2000/svg" width="2rem" height="2rem" fill="currentColor" class="bi bi-send" viewBox="0 0 16 16">
                                    <path d="M15.854.146a.5.5 0 0 1 .11.54l-5.819 14.547a.75.75 0 0 1-1.329.124l-3.178-4.995L.643 7.184a.75.75 0 0 1 .124-1.33L15.314.037a.5.5 0 0 1 .54.11ZM6.636 10.07l2.761 4.338L14.13 2.576 6.636 10.07Zm6.787-8.201L1.591 6.602l4.339 2.76 7.494-7.493Z" />
                                </svg>
                            </div>
                            <a role="button" class="text-decoration-none text-black">
                                <div class="row g-0">
                                    <div class="col-3 d-flex align-self-center">
                                        <img src="@(chat.CardImage)"
                                                class="img-fluid"
                                                alt="Space template logo" />
                                    </div>
                                    <div class="col-9">
                                        <div class="card-body">
                                            <h2 class="card-title fs-3 text-danger">
                                                @chat.CardHeading
                                            </h2>
                                            <p class="card-text">
                                                @chat.Heading
                                            </p>
                                        </div>
                                    
                                    </div>
                                </div>
                            </a>
                            <div class="d-flex align-items-center px-4 text-white bg-danger rounded-end">
                                <svg xmlns="http://www.w3.org/2000/svg" width="2rem" height="2rem" fill="currentColor" class="bi bi-trash3" viewBox="0 0 16 16">
                                    <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5ZM11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H2.506a.58.58 0 0 0-.01 0H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1h-.995a.59.59 0 0 0-.01 0H11Zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5h9.916Zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47ZM8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5Z" />
                                </svg>
                            </div>
                        </div>
                    </article>
                </div>
            }
        </div>
    }
</div>

@code {
    private IEnumerable<ChatHistory> userChatHistory;

    protected override async Task OnInitializedAsync()
    {
        await GetUserHistory();

        if (Session.User.Username == null)
        {
            if (await Session.IsLoggedIn())
            {
                await GetUserHistory();
                StateHasChanged();
            }
            else
            {
                navManager.NavigateTo("/");
            }
        }

        MessageService.OnDeleteChat += async () => { await GetUserHistory(); StateHasChanged(); };
    }

    async Task GetUserHistory()
        => userChatHistory = await ChatHistory.GetAllAsync(x => x.UserId == Session.User.Id) ?? null!;

    void StartWizard()
        => navManager.NavigateTo("/promptwizard");

    void GoToChat(ChatHistory selectedChat)
    {
        Session.CurrentChat = selectedChat;
        navManager.NavigateTo("/chat");
    } 

    public void SwipeTouchStart(TouchEventArgs t)
    {
        Swipe.HandleTouchStart(t.TargetTouches[0]);
    }

    public async Task HandleTouchEnd(Guid chatId, TouchEventArgs t)
    {
        Swipe.HandleTouchEnd(chatId, t);
    }
}