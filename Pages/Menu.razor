@page "/menu"
@inject ICookieStoreAPIService CookieStore;
@inject IUserSession Session;
@inject IChatHistoryRepository ChatHistory;

<PageTitle>Meny</PageTitle>

<div class="container"> 
    <article class="row mb-5">
        <div class="col card me-md-2 border-0 @hideElement" @onclick="() => StartWizard()">
            <a role="button">
                <div class="d-flex card-header bg-white border-0 justify-content-center">
                    <img src="images/building.svg"
                         class="img-fluid w-75 "
                         alt="School logo" />
                </div>
                <div class="card-body">
                    <h1 class="fs-6">
                        Begin a captivating journey with our app! Dive into endless knowledge explorations. Discover. Grow. Start today!
                    </h1>
                    <div class="m-0">
                        Start with our premade Wizards here!
                        <span class="fs-3 fw-bold">&rarr;</span>
                    </div>
                </div>
            </a>
        </div>
        @if (userChatHistory != null && userChatHistory.Count() == 5 && userChatHistory.All(chat => chat.IsLocked))
        {
            <div class="col card me-md-2 border-0 text-center justify-content-center gap-1">
                <h2 class="text-danger">
                    All chats are             
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="red" class="bi bi-suit-heart-fill" viewBox="0 0 16 16">
                        <path d="M4 1c2.21 0 4 1.755 4 3.92C8 2.755 9.79 1 12 1s4 1.755 4 3.92c0 3.263-3.234 4.414-7.608 9.608a.513.513 0 0 1-.784 0C3.234 9.334 0 8.183 0 4.92 0 2.755 1.79 1 4 1z" />
                    </svg>.<br>
                    Please
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="red" class="bi bi-suit-heart" viewBox="0 0 16 16">
                        <path d="m8 6.236-.894-1.789c-.222-.443-.607-1.08-1.152-1.595C5.418 2.345 4.776 2 4 2 2.324 2 1 3.326 1 4.92c0 1.211.554 2.066 1.868 3.37.337.334.721.695 1.146 1.093C5.122 10.423 6.5 11.717 8 13.447c1.5-1.73 2.878-3.024 3.986-4.064.425-.398.81-.76 1.146-1.093C14.446 6.986 15 6.131 15 4.92 15 3.326 13.676 2 12 2c-.777 0-1.418.345-1.954.852-.545.515-.93 1.152-1.152 1.595L8 6.236zm.392 8.292a.513.513 0 0 1-.784 0c-1.601-1.902-3.05-3.262-4.243-4.381C1.3 8.208 0 6.989 0 4.92 0 2.755 1.79 1 4 1c1.6 0 2.719 1.05 3.404 2.008.26.365.458.716.596.992a7.55 7.55 0 0 1 .596-.992C9.281 2.049 10.4 1 12 1c2.21 0 4 1.755 4 3.92 0 2.069-1.3 3.288-3.365 5.227-1.193 1.12-2.642 2.48-4.243 4.38z" />
                    </svg>
                    in one Chat Settings to start new chat.</h2>
            </div>
        }
        <div class="col card d-none d-md-block ms-md-2 border-0">
            <a role="button">
                <div class="card-body d-flex justify-content-center">
                    <img src="images/cutecat.gif"
                         class="card-header bg-white border-0 img-fluid"
                         alt="Cute Cat gid" />
                </div>
            </a>
        </div>
    </article>

    <div class="row mb-3">
        <h2 class="border-start border-success border-5 rounded-1 fs-4 fw-semibold mb-3">
            Chat History
        </h2>
    </div>


    @if (userChatHistory == null || userChatHistory.Count() == 0)
    {
        <div class="row text-center text-danger mt-5">
            <h2 class="fs-2">You have no search history yet!</h2>
        </div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-2">
            @foreach (var chat in userChatHistory)
            {
                @* var currentChatId = chat.Id;
                <a href="/chat/@UserId/@chat.Id"
                   class="menu-button btn p-1"
                @ontouchstart="HandleTouchStart"
                @ontouchend="@((TouchEventArgs t) => HandleTouchEnd(currentChatId, t))">@chat.Heading</a> *@

                <div class="col-12 col-md-6" @onclick="() => GoToChat(chat)">
                    <article class="card mb-3 m-auto"
                                style="max-width: 540px">
                        <a role="button"
                            class="text-decoration-none text-black">
                            <div class="row g-0">
                                <div class="col-3 d-flex align-self-center">
                                    <img src="@(chat.CardImage)"
                                            class="img-fluid"
                                            alt="Space template logo" />
                                </div>
                                <div class="col-9">
                                    <div class="card-body">
                                        <h2 class="card-title fs-3 text-danger">
                                            @chat.CardHeading
                                        </h2>
                                        <p class="card-text">
                                            @chat.Heading
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </a>
                    </article>
                </div>
            }
        </div>
    }
</div>

@code {
    private IEnumerable<ChatHistory> userChatHistory;
    private string hideElement = null;

    // (TouchPoint ReferencePoint, DateTime StartTime) startPoint;

    protected override async Task OnInitializedAsync()
        => await GetUserHistory();

    async Task GetUserHistory()
    {
        userChatHistory = await ChatHistory.GetAllAsync(x => x.UserId == Session.User.Id) ?? null!;

        if (userChatHistory != null && userChatHistory.Count() == 5 && userChatHistory.All(chat => chat.IsLocked))
        {
            hideElement = "d-none";
        }
    }
    
    void StartWizard()
        => navManager.NavigateTo("/promptwizard");

    void GoToChat(ChatHistory selectedChat)
    {
        Session.CurrentChat = selectedChat;
        navManager.NavigateTo("/chat");
    } 
    

    // void HandleTouchStart(TouchEventArgs t)
    // {
    //     startPoint.ReferencePoint = t.TargetTouches[0];
    //     startPoint.StartTime = DateTime.Now;
    // }

    // private async Task HandleTouchEnd(Guid chatId, TouchEventArgs t)
    // {
    //     var endReference = t.ChangedTouches[0];

    //     var diffX = startPoint.ReferencePoint.ClientX - endReference.ClientX;
    //     var diffY = startPoint.ReferencePoint.ClientY - endReference.ClientY;
    //     var diffTime = DateTime.Now - startPoint.StartTime;
    //     var velocityX = Math.Abs(diffX / diffTime.Milliseconds);
    //     var velocityY = Math.Abs(diffY / diffTime.Milliseconds);
    //     var run = Math.Abs(diffX);
    //     var rise = Math.Abs(diffY);
    //     var ang = Math.Atan2(run, rise) * (180/Math.PI);

    //     var swipeThreshold = 0.8;

    //     if (Math.Abs(velocityX - velocityY) < .5 || (velocityX < swipeThreshold && velocityY < swipeThreshold)) return;

    //     if (ang > 85 && velocityX >= swipeThreshold)
    //     {
    //         if (diffX > 0)
    //             await historyStorage.DeleteChatById(chatId);

    //     }

    //     await GetUserHistory();
    // }
}

